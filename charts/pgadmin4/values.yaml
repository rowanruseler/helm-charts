# Default values for pgAdmin4.

replicaCount: 1

## pgAdmin4 container image
##
image:
  repository: dpage/pgadmin4
  tag: 4.19
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  targetPort: http
  # targetPort: 4181 To be used with a proxy extraContainer
  portName: http

  ## Specify the nodePort value for the service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:

## Strategy used to replace old Pods by new ones
## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
##
strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

## Server definitions will be loaded at launch time. This allows connection
## information to be pre-loaded into the instance of pgAdmin4 in the container.
## Ref: https://www.pgadmin.org/docs/pgadmin4/4.13/import_export_servers.html
##
serverDefinitions:
  ## If true, server definitions will be created
  ##
  enabled: false

  servers: |-
  #  "1": {
  #    "Name": "Minimally Defined Server",
  #    "Group": "Servers",
  #    "Port": 5432,
  #    "Username": "postgres",
  #    "Host": "localhost",
  #    "SSLMode": "prefer",
  #    "MaintenanceDB": "postgres"
  #  }

ingress:
  ## If true, pgAdmin4 Ingress will be created
  ##
  enabled: false

  ## pgAdmin4 Ingress annotations
  ##
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  ## pgAdmin4 Ingress hostnames with optional path
  ## Must be provided if Ingress is enabled
  hosts:
    - host: chart-example.local
      paths: []

  ## pgAdmin4 Ingress TLS configuration
  ## Secrets must be manually created in the namespace
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Additional config maps to be mounted inside a container
# Can be used to map config maps for sidecar as well
extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/ssl/certs
  #   subPath: ca-certificates.crt # (optional)
  #   configMap: certs-configmap
#   readOnly: true

## Specify additional containers in extraContainers.
## For example, to add an authentication proxy to a pgadmin4 pod.
extraContainers: |
# - name: proxy
#   image: quay.io/gambol99/keycloak-proxy:latest
#   args:
#   - -provider=github
#   - -client-id=
#   - -client-secret=
#   - -github-org=<ORG_NAME>
#   - -email-domain=*
#   - -cookie-secret=
#   - -http-address=http://0.0.0.0:4181
#   - -upstream-url=http://127.0.0.1:3000
#   ports:
#     - name: proxy-web
#       containerPort: 4181

## Provide the name for an existing secret.
## Useful to avoid specifying password and server config in YAML files
existingSecret: ""

## pgAdmin4 startup configuration
## Values in here get injected as environment variables
##
env:
  email: chart@example.local
  password: SuperSecret

  ## If True, allows pgAdmin4 to create session cookies based on IP address
  ## Ref: https://www.pgadmin.org/docs/pgadmin4/4.18/config_py.html
  #
  enhanced_cookie_protection: "False"

persistentVolume:
  ## If true, pgAdmin4 will create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## pgAdmin4 Persistent Volume Claim annotations
  ##
  annotations: {}

  ## pgAdmin4 Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  accessModes:
    - ReadWriteOnce

  ## pgAdmin4 Persistent Volume Size
  ##
  size: 10Gi

  ## pgAdmin4 Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  # existingClaim: ""

## Security context to be added to pgAdmin4 pods
##
securityContext:
  runAsUser: 5050
  runAsGroup: 5050
  fsGroup: 5050

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## pgAdmin4 readiness and liveness probe initial delay and timeout
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##
livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

## Node labels for pgAdmin4 pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Node tolerations for server scheduling to nodes with taints
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
tolerations: []

## Pod affinity
##
affinity: {}

## Pod annotations
##
podAnnotations: {}
